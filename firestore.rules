rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Authentication Helper Functions
    function isAuthorizedUser() {
      return request.auth != null && 
exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isCloudFunction() {
      return request.auth != null &&
             request.auth.token.firebase.sign_in_provider == 'google.com' &&
             request.auth.token.email.matches('.*@firebase.google.com$');
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }

    function isAccountOlderThan(days) {
      return request.time.toMillis() - request.auth.token.auth_time * 1000 > days * 86400000;
    }

    function isAnonymous() {
      return request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isAnonymousWithinLimits() {
      return isAnonymous() && getCollectionCount() < 50;
    }

    function getCollectionCount() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.collectionCount;
    }

    // Validation Functions
    function isValidCard() {
      let data = request.resource.data;
      return data.keys().hasAll(['productId', 'name', 'cleanName', 'elements']) &&
             data.productId is number &&
             data.name is string &&
             data.cleanName is string &&
             data.elements is list;
    }

    function isValidPrice() {
      let data = request.resource.data;
      return data.keys().hasAll(['productId', 'lastUpdated']) &&
             data.productId is number &&
             data.lastUpdated is timestamp &&
             (data.get('normal', {}).get('marketPrice', null) is number || 
              data.get('foil', {}).get('marketPrice', null) is number) &&
             (data.get('normal', {}).get('marketPrice', null) == null || data.get('normal', {}).get('marketPrice', null) >= 0);
    }

    function isValidDeck() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'name', 'cards']) &&
             data.userId == request.auth.uid &&
             data.name is string &&
             data.name.size() <= 100 &&
             data.cards is list &&
             data.cards.size() >= 50 &&
             data.cards.size() <= 100;
    }

    function isValidDeckUpdate() {
      let data = request.resource.data;
      let oldData = resource.data;
      
      // Ensure userId cannot be changed
      return data.userId == oldData.userId &&
             // Validate other fields
             data.name is string &&
             data.name.size() <= 100 &&
             data.cards is list &&
             data.cards.size() >= 50 &&
             data.cards.size() <= 100 &&
             // Only owner can change isPublic
             (data.isPublic == oldData.isPublic || request.auth.uid == data.userId);
    }

    function isValidCollection() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'cardId', 'lastModified']) &&
             data.userId == request.auth.uid &&
             data.cardId is string &&
             data.lastModified is timestamp &&
             (data.regularQty is number || data.foilQty is number) &&
             (data.regularQty == null || (data.regularQty is number && data.regularQty >= 0 && data.regularQty <= 100)) &&
             (data.foilQty == null || (data.foilQty is number && data.foilQty >= 0 && data.foilQty <= 100)) &&
             (!data.keys().hasAny(['condition']) || data.condition is map) &&
             (!data.keys().hasAny(['purchaseInfo']) || data.purchaseInfo is map);
    }

    // Cards Collection (Public read, admin write)
    match /cards/{cardId} {
      allow read: if true;
      allow write: if isCloudFunction() || isAuthorizedUser();
      allow update: if isCloudFunction() || isAuthorizedUser() && isValidCard();
    }

    // Prices Collection
    match /prices/{priceId} {
      allow read: if true;
      allow write: if isCloudFunction() || isAuthorizedUser();
      allow update: if isCloudFunction() || isAuthorizedUser() && isValidPrice();
    }

    // Historical Prices Collection
    match /historicalPrices/{priceId} {
      allow read: if true;
      allow write: if isCloudFunction() || isAuthorizedUser();
    }

    // Groups Collection (Sets)
    match /groups/{groupId} {
      allow read: if true;
      allow write: if isCloudFunction() || isAuthorizedUser();
    }

    // Collections (User specific)
    match /collections/{collectionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                    isOwner(request.resource.data.userId) && 
                    isValidCollection() && 
                    (isEmailVerified() || !isAccountOlderThan(7) || isAnonymousWithinLimits());
      allow update: if isAuthenticated() && 
                    isOwner(resource.data.userId) && 
                    isValidCollection() && 
                    (isEmailVerified() || !isAccountOlderThan(7) || isAnonymousWithinLimits());
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Decks
    match /decks/{deckId} {
      allow read: if isAuthenticated() && (resource.data.isPublic || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                    isValidDeck() && 
                    (isEmailVerified() || !isAccountOlderThan(7));
      allow update: if isAuthenticated() && 
                    isOwner(resource.data.userId) && 
                    isValidDeckUpdate() && 
                    (isEmailVerified() || !isAccountOlderThan(7));
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Admin users collection
    match /admins/{userId} {
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Filters Collection
    match /filters/{document=**} {
      allow read: if true;
      allow write: if isCloudFunction() || isAuthorizedUser();
    }
    
    // User Documents
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId) && 
                    (
                      // Ensure collectionCount can only be incremented by 1 or decremented
                      !request.resource.data.keys().hasAny(['collectionCount']) ||
                      request.resource.data.collectionCount == resource.data.collectionCount + 1 ||
                      request.resource.data.collectionCount < resource.data.collectionCount
                    );
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // User Settings
    match /users/{userId}/settings/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // User Stats
    match /users/{userId}/stats/{document=**} {
      allow read: if resource.data.isPublic || isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Metadata
    // Allow read access to metadata collection
    match /metadata/{docId} {
      allow read: if true;
      allow write: if false;
    }
  }
}